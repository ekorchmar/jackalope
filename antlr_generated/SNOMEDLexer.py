# Generated from SNOMED.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,154,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,4,23,114,8,23,11,23,12,23,115,1,24,1,24,3,24,
        120,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,31,1,31,4,31,149,8,31,11,31,12,31,150,1,31,1,31,0,0,32,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,14,45,15,47,16,49,17,51,
        18,53,19,55,20,57,21,59,22,61,23,63,24,1,0,12,2,0,84,84,116,116,
        2,0,82,82,114,114,2,0,85,85,117,117,2,0,69,69,101,101,2,0,70,70,
        102,102,2,0,65,65,97,97,2,0,76,76,108,108,2,0,83,83,115,115,1,0,
        49,57,1,0,48,57,3,0,9,10,13,13,32,32,1,0,124,124,148,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,69,
        1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,75,1,0,0,0,13,77,1,0,0,0,15,
        79,1,0,0,0,17,81,1,0,0,0,19,83,1,0,0,0,21,85,1,0,0,0,23,87,1,0,0,
        0,25,89,1,0,0,0,27,91,1,0,0,0,29,93,1,0,0,0,31,95,1,0,0,0,33,97,
        1,0,0,0,35,99,1,0,0,0,37,101,1,0,0,0,39,103,1,0,0,0,41,105,1,0,0,
        0,43,107,1,0,0,0,45,109,1,0,0,0,47,111,1,0,0,0,49,119,1,0,0,0,51,
        121,1,0,0,0,53,125,1,0,0,0,55,127,1,0,0,0,57,131,1,0,0,0,59,135,
        1,0,0,0,61,140,1,0,0,0,63,146,1,0,0,0,65,66,5,58,0,0,66,2,1,0,0,
        0,67,68,5,43,0,0,68,4,1,0,0,0,69,70,5,44,0,0,70,6,1,0,0,0,71,72,
        5,123,0,0,72,8,1,0,0,0,73,74,5,125,0,0,74,10,1,0,0,0,75,76,5,61,
        0,0,76,12,1,0,0,0,77,78,5,34,0,0,78,14,1,0,0,0,79,80,5,35,0,0,80,
        16,1,0,0,0,81,82,5,40,0,0,82,18,1,0,0,0,83,84,5,41,0,0,84,20,1,0,
        0,0,85,86,5,45,0,0,86,22,1,0,0,0,87,88,5,46,0,0,88,24,1,0,0,0,89,
        90,5,48,0,0,90,26,1,0,0,0,91,92,7,0,0,0,92,28,1,0,0,0,93,94,7,1,
        0,0,94,30,1,0,0,0,95,96,7,2,0,0,96,32,1,0,0,0,97,98,7,3,0,0,98,34,
        1,0,0,0,99,100,7,4,0,0,100,36,1,0,0,0,101,102,7,5,0,0,102,38,1,0,
        0,0,103,104,7,6,0,0,104,40,1,0,0,0,105,106,7,7,0,0,106,42,1,0,0,
        0,107,108,7,8,0,0,108,44,1,0,0,0,109,110,7,9,0,0,110,46,1,0,0,0,
        111,113,3,43,21,0,112,114,3,45,22,0,113,112,1,0,0,0,114,115,1,0,
        0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,48,1,0,0,0,117,120,3,55,
        27,0,118,120,3,57,28,0,119,117,1,0,0,0,119,118,1,0,0,0,120,50,1,
        0,0,0,121,122,7,10,0,0,122,123,1,0,0,0,123,124,6,25,0,0,124,52,1,
        0,0,0,125,126,5,34,0,0,126,54,1,0,0,0,127,128,5,61,0,0,128,129,5,
        61,0,0,129,130,5,61,0,0,130,56,1,0,0,0,131,132,5,60,0,0,132,133,
        5,60,0,0,133,134,5,60,0,0,134,58,1,0,0,0,135,136,3,27,13,0,136,137,
        3,29,14,0,137,138,3,31,15,0,138,139,3,33,16,0,139,60,1,0,0,0,140,
        141,3,35,17,0,141,142,3,37,18,0,142,143,3,39,19,0,143,144,3,41,20,
        0,144,145,3,33,16,0,145,62,1,0,0,0,146,148,5,124,0,0,147,149,8,11,
        0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,
        0,0,151,152,1,0,0,0,152,153,5,124,0,0,153,64,1,0,0,0,4,0,115,119,
        150,1,6,0,0
    ]

class SNOMEDLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NONZERODIGIT = 14
    DIGIT = 15
    SCTID = 16
    DEFINITIONSTATUS = 17
    WS = 18
    QM = 19
    EQUIVALENTTO = 20
    SUBTYPEOF = 21
    TRUE = 22
    FALSE = 23
    CONCEPTNAME = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'+'", "','", "'{'", "'}'", "'='", "'\"'", "'#'", "'('", 
            "')'", "'-'", "'.'", "'0'", "'==='", "'<<<'" ]

    symbolicNames = [ "<INVALID>",
            "NONZERODIGIT", "DIGIT", "SCTID", "DEFINITIONSTATUS", "WS", 
            "QM", "EQUIVALENTTO", "SUBTYPEOF", "TRUE", "FALSE", "CONCEPTNAME" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T", 
                  "R", "U", "E", "F", "A", "L", "S", "NONZERODIGIT", "DIGIT", 
                  "SCTID", "DEFINITIONSTATUS", "WS", "QM", "EQUIVALENTTO", 
                  "SUBTYPEOF", "TRUE", "FALSE", "CONCEPTNAME" ]

    grammarFileName = "SNOMED.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


